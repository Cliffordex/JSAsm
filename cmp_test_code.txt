These are programs I wrote at various stages of the compiler, and may not work as intended, or at all. Use at your own risk.

/*
macro "define"-unk-num { def %1% %2% }
macro mem { "" }
macro mem-"="-nummem { "mov %0% %2%" }
macro mem-"+"-num { "add %0% %2%" }
macro mem-"-"-num { "sub %0% %2%" }
macro mem-"--" { "sub %0% 00000001" }
macro mem-"++" { "add %0% 00000001" }
macro mem-"="-"rnd" { "push r0", "rnd", "mov %0% r0", "pop r0" }
macro "rgb"-nummem { "mov r2 %1%", "mov r3 %1%", "mov r4 %1%"}
macro "rgb"-nummem-nummem-nummem { "mov r2 %1%", "mov r3 %2%", "mov r4 %3%"}
macro "goto"-lab|"jump"-lab { "jmp _%1%" }
macro "goxy"-num-num { "mov r0 %1%", "mov r1 %2%"}
macro "ckeys" {?!def CKEYS {"or int 10000000", def CKEYS 1} }
macro "paint" {"pnt"}
macro "paint"-nummem-nummem {"mov r0 %1%", "mov r1 %2%", "pnt"}
macro "point"-nummem-nummem {"mov r0 %1%", "mov r1 %2%"}
macro "rct"-num-num-num-num { "push %1%","push %2%","push %3%","push %4%", "rct" }
macro "turbo"-"on" {"turbo 1"}
macro "turbo"-"off" {"turbo 0"}
macro "rand"-mem { "push r0", "rnd", "mov %1% r0" , "pop r0" }
macro "rand"-mem-mem { "push r0", "rnd", "mov %1% r0", "rnd", "mov %2% r0", "pop r0" }
macro "rand"-mem-mem-mem { "push r0", "rnd", "mov %1% r0", "rnd", "mov %2% r0", "rnd", "mov %3% r0", "pop r0" }

macro "call"-lab { "push pos", "jmp _%1%" }
macro "call"-unk { "<b>Label <code>%1%</code> not found.</b>" }
macro "resv"-num { "push bp", "mov bp sp", "sub sp %1%" }
// I think this is right? Dblchk
macro "retn"-num { "mov sp bp", "pop bp", "pop r7", "pop r6", "add r6 d1", "cmp r6 d0", "snz d1", "add r7 d1", "mov pos r6 r7"}
macro "ret" {"pop r7", "pop r6", "add r6 d1", "cmp r6 d0", "snz d1", "add r7 d1", "mov pos r6 r7"}

//macro "pchar"-num { "mov r7 %1%", "runs charPrint" }

define K_NONE 10000000
define K_NORTH 10000001
define K_WEST 10000010
define K_EAST 10000011
define K_SOUTH 10000100
define K_CNTR 10000101

ext DefASCII
//ext 4X4ASCIIFont
define CHAR__ d32

macro "pushstr"-unk { "push d0", reachchr %1% {"push CHAR_%0%"} }
//macro "print"-unk { "push d0", "pushstr %1%", "call printstr" }

macro "ifkdn"-num-lab|"ifkdn"-mem-lab { "cmp int %1%", "jz _%2%" }
macro "ifeq"-num-num-lab|"ifeq"-mem-num-lab|"ifeq"-num-mem-lab|"ifeq"-mem-mem-lab { "cmp %1% %2%", "jz _%3%" }
macro "setkdn"-num-mem-num { "cmp int %1%", "snz 00000001", "mov %2% %3%" }

ckeys
function main {
  point d10 d10
  rgb d0 d255 d0
  //~turbo d100
  pushstr ABCDEFGHIJKLMNOPQRSTUVWXYZ
  call printstr
  ~mov sp bp
  ~turbo d0

  ~end
}

// I'm lazy, clean up your own stack. ('add sp dStringLen+1' after func ret)
function printstr {
  local curchr
  curchr = d3
  ~:_printstr_lp
  curchr + d1
  ~mov r7 curchr
  ~mov r6 [bp + r7]
  ~cmp r6 d0
  ~jz _printstr_end
  
  call printchr
  ~jmp _printstr_lp
  ~:_printstr_end
}
macro "char4map"-num-mem-num-mem-num {"cmp r6 %1%", "snz d3", "mov %2% %3%", "mov %4% %5%", "jmp _printchr_parts"}
function printchr {
  local prta
  local prtb
  ~cmp r6 d32
  ~snz d2
  ~add r0 d4
  ~jmp _printchr_nd
  char4map CHAR_E prta 11101000 prtb 11001110
  char4map CHAR_T prta 11100100 prtb 01000100
  char4map CHAR_A prta 01001010 prtb 11101010
  char4map CHAR_O prta 11101010 prtb 10101110
  char4map CHAR_I prta 11100100 prtb 01001110
  char4map CHAR_N prta 11001010 prtb 10101010
  char4map CHAR_S prta 01101100 prtb 00101100
  char4map CHAR_H prta 10101010 prtb 11101010
  char4map CHAR_R prta 11001010 prtb 11001010
  char4map CHAR_D prta 11001010 prtb 10101100
  char4map CHAR_L prta 10001000 prtb 10001110
  char4map CHAR_U prta 10101010 prtb 10101110
  char4map CHAR_C prta 01101000 prtb 10000110
  char4map CHAR_M prta 11101110 prtb 10101010
  char4map CHAR_F prta 11101000 prtb 11001000
  char4map CHAR_W prta 10101010 prtb 11101110
  ~mov prta 01001000
  ~mov prtb 00100100
  printchr_parts:
  ~mov r7 d0
  printchr_partalp:
  ~mov r6 prta
  ~shl r6 r7
  ~add r7 d1
  ~and r6 10000000
  ~cmp r6 10000000
  ~snz d1
  ~pnt
  ~add r0 d1
  ~cmp r7 d4
  ~snz d2
  ~sub r0 d4
  ~add r1 d1
  ~cmp r7 d9
  ~jl _printchr_partalp
  ~sub r0 d5
  ~add r1 d1
  ~mov r7 d0
  printchr_partblp:
  ~mov r6 prtb
  ~shl r6 r7
  ~add r7 d1
  ~and r6 10000000
  ~cmp r6 10000000
  ~snz d1
  ~pnt
  ~add r0 d1
  ~cmp r7 d4
  ~snz d2
  ~sub r0 d4
  ~add r1 d1
  ~cmp r7 d9
  ~jl _printchr_partblp
  ~sub r1 d3
  ~sub r0 d1
  printchr_nd:
}

*/


/*
rgb d200 d200 d200
~turbo 1
print WHAT_LETTER_COMES_
print AFTER_
~push r0
rernd:
~rnd
~cmp r0 d25
~jg _rernd
~mov r7 r0
~pop r0
~push d0
~push r7
~runs strPrint
redr:
rgb d0 d0 d0
rct d0 d9 d255 d6
rgb d200 d200 d200
goxy d0 d10
~mov r7 d0
redrlp:
~add r7 d1
~push r7
~runs charPrint
~pop r7
~cmp r7 d26
~jnz _redrlp
~mov r7 $sel$
~mov r6 d0
~mov r0 d0
mvtohl:
~cmp r6 r7
~jz _mvdhl
~add r6 d1
~add r0 d4
~jmp _mvtohl
mvdhl:
~sub r1 d1
~push r0
~push r1
~push d4
~push d5
~rct
~add r1 d1
~mov r7 $sel$
rgb d50 d50 d50
~add r7 d1
~runs charPrint
~mov r7 $sel$
kywt:
ifkdn K_NONE kywt
ifkdn K_EAST incsel
ifkdn K_WEST decsel
goto kywt
incsel:
$sel$ ++
goto redr
decsel:
$sel$ --
goto redr
*/
















<!--
~rnd
~mov $TARGX$ r0
~rnd
~mov $TARGY$ r0
~rnd
~mov $TARGCR$ r0
~rnd
~mov $TARGCG$ r0
~rnd
~mov $TARGCB$ r0
~rnd
~mov $TILCLR$ r0
lp:
rgb 0 0 0
~mov r5 d10
~push 00000001
~push 00000001
~push 11111111
~push 11111111
~rcta
rgb $CR$ $CG$ $CB$
pnt $X$ $Y$
~turbo 0
~turbo 1
~mov $RET$ posl
~mov r6 $X*$
~mov r7 $TARGX*$
GOTO dcmp
~mov $RET$ posl
~mov r6 $Y*$
~mov r7 $TARGY*$
GOTO dcmp
~mov $RET$ posl
~mov r6 $CR*$
~mov r7 $TARGCR*$
GOTO dcmp
~mov $RET$ posl
~mov r6 $CG*$
~mov r7 $TARGCG*$
GOTO dcmp
~mov $RET$ posl
~mov r6 $CB*$
~mov r7 $TARGCB*$
GOTO dcmp
GOTO lp
dcmp:
~cmp #r6 #r7
~jz _ntarg
~jg _movup
~jl _movdn
aftmov:
$RET$ + 3
~mov r7 $RET$
~jmp r7 
GOTO lp
ntarg:
~push r0
~rnd
~mov #r7 r0
~pop r0
GOTO aftmov
movdn:
~add #r6 1
GOTO aftmov
movup:
~sub #r6 1
GOTO aftmov





~nop RainAmt: (max 128)
~mov r7 d10
~nop More rain will also make it fall slower
~sub r7 00000001
~shl r7 d1
rgb 255 255 255
initlp:
~turbo 1
~rnd
~mov #r1 r0
~cmp r1 r7
~add r1 d1
~turbo 0
~jz _lp
goto initlp
lp:
goto dodrp
alp:
~cmp r6 11111110
~jnz _lp
~mov r6 r7
rgb 0 0 0
~mov r5 d80
~push 0
~push 0
~push d255
~push d255
~rcta
rgb 100 180 255
~turbo 0
~turbo 1
goto lp
dodrp:
~cmp #r6 11111111
~jz _newlc 
~add #r6 d1
~mov r1 #r6
~mov r0 r6
~add r0 d1
~mov r0 #r0
~pnt
~sub r6 d2
goto alp
newlc:
~add r6 d1
~rnd
~mov #r6 r0
~sub r6 d1
~mov #r6 00000000
goto alp
-->







<!--
macro "define"-unk-num { def %1% %2% }
macro mem { "" }
macro mem-"="-nummem { "mov %0% %2%" }
macro mem-"+"-num { "add %0% %2%" }
macro mem-"-"-num { "sub %0% %2%" }
macro mem-"--" { "sub %0% 00000001" }
macro mem-"++" { "add %0% 00000001" }
macro mem-"="-"rnd" { "push r0", "rnd", "mov %0% r0", "pop r0" }
macro "rgb"-nummem { "mov r2 %1%", "mov r3 %1%", "mov r4 %1%"}
macro "rgb"-nummem-nummem-nummem { "mov r2 %1%", "mov r3 %2%", "mov r4 %3%"}
macro "goto"-lab|"jump"-lab { "jmp _%1%" }
macro "goxy"-num-num { "mov r0 %1%", "mov r1 %2%"}
macro "ckeys" {?!def CKEYS {"or int 10000000", def CKEYS 1} }
macro "paint" {"pnt"}
macro "clear" {"clr"}
macro "paint"-nummem-nummem {"mov r0 %1%", "mov r1 %2%", "pnt"}
macro "point"-nummem-nummem {"mov r0 %1%", "mov r1 %2%"}
macro "rct"-num-num-num-num { "push %1%","push %2%","push %3%","push %4%", "rct" }
macro "lin"-num-num-num-num { "push %1%","push %2%","push %3%","push %4%", "lin" }
macro "turbo"-"on" {"turbo 1"}
macro "turbo"-"off" {"turbo 0"}
macro "rand"-mem { "push r0", "rnd", "mov %1% r0" , "pop r0" }
macro "rand"-mem-mem { "push r0", "rnd", "mov %1% r0", "rnd", "mov %2% r0", "pop r0" }
macro "rand"-mem-mem-mem { "push r0", "rnd", "mov %1% r0", "rnd", "mov %2% r0", "rnd", "mov %3% r0", "pop r0" }

macro "call"-lab { "push pos", "jmp _%1%" }
macro "call"-lab-nummem { "mov r7 %2%", call %1% }
macro "call"-lab-nummem-nummem { "mov r6 %2%", "mov r7 %3%", call %1% }
macro "call"-unk { "<b>Label <code>%1%</code> not found.</b>" }
macro "callz"-lab { "snz d2", "push pos", "jmp _%1%" }
macro "resv"-num { "push bp", "mov bp sp", "sub sp %1%" }
// I think this is right? Dblchk. (Checked, seems to work great.)
macro "retn"-num { "mov sp bp", "pop bp", "pop r7", "pop r6", "add r6 d1", "cmp r6 d0", "snz d1", "add r7 d1", "mov pos r6 r7"}
macro "ret" { "jmp _funcrtn" }
macro "rtInt" {"pop r7", "pop r6", "add r6 d1", "cmp r6 d0", "snz d1", "add r7 d1", "mov pos r6 r7"}

//macro "pchar"-num { "mov r7 %1%", "runs charPrint" }

define KC_NONE 10000000
define KC_NORTH 10000001
define KC_WEST 10000010
define KC_EAST 10000011
define KC_SOUTH 10000100
define KC_CNTR 10000101
define K_NONE 00000000
define K_NORTH 00000001
define K_WEST 00000010
define K_EAST 00000011
define K_SOUTH 00000100
define K_CNTR 00000101

ext DefASCII
//ext 4X4ASCIIFont
define CHAR__ d32
define CHAR_. d46
define CHARGT d63
define CHARLT d64

macro "pushstr"-unk { "push d0", reachchr %1% {"push CHAR_%0%"} }
macro "ifz"-blk { "snz", blklen %1% }
macro "printstr"-unk { "push d0", reachchr %1% { "push CHAR_%0%" }, call printStr, "add sp d%strlen_1%" }
//macro "print"-unk { "push d0", "pushstr %1%", "call printstr" }

macro "ifkdn"-num-lab|"ifkdn"-mem-lab { "cmp int %1%", "jz _%2%" }
macro "ifeq"-nummem-nummem-lab { "cmp %1% %2%", "jz _%3%" }
macro "setkdn"-num-mem-num { "cmp int %1%", "snz 00000001", "mov %2% %3%" }

define osm_black 00000000
define osm_white 11111100
define osm_red 11000000
define osm_green 00110000
define osm_darkgreen 00010000

define terb d0

ckeys

~turbo terb
call osmRun
~end

funcrtn:
rtInt
~end

function osmRun {
  local cursel
  local curfg
  local curbg
  cursel = 00000001
  curbg = osm_darkgreen
  curfg = osm_green
  //~mov r6 osm_black
  //~mov r7 osm_white
  call osmDrawBG osm_black osm_white

  //~mov r0 d100
  //~mov r1 d20
  //~mov r7 osm_white
  //call makeColr
  //pushstr LOADING...
  //call printstr
  //~sub sp d11
  osmRun_int:
  //~mov r6 curbg
  //~mov r7 curfg
  call osmDrawBG curbg curfg
 
  point d6 d0  

  ~add r1 d5
  printstr END

  ~mov r0 d6
  ~add r1 d5
  printstr RND

  ~mov r0 d6
  ~add r1 d5
  //FOREGROUND
  printstr FG

  ~mov r0 d6
  ~add r1 d5
  //BACKGROUND
  printstr BG

  osmRunLp:
  //~mov r7 curbg
  call makeColr curbg
  rct d3 d3 d2 d100
  
  //~mov r7 curfg
  call makeColr curfg
  point d3 d1
  
  //~mov r7 cursel
  call osmDrawSelCur cursel
  
  ~and int 01111111
  osmRunInput:
  ~cmp int 00000000
  ~jz _osmRunInput
  ~mov r7 int
  ~mov int d0
  ~cmp r7 00000001
  ~snz d1
  cursel - d1
  ~cmp r7 00000100
  ~snz d1
  cursel + d1

  ~cmp cursel d0
  ~snz d1
  ~mov cursel d1

  ~cmp r7 00000101
  ~jnz _osmRunLp
  ~mov r7 cursel
  // EXIT
  ~cmp r7 d1
  ~jz _osmEnd
  // RNDCLR
  ~cmp r7 d2
  ~jz _osmRun_rndclr
  // EDTFG
  ~cmp r7 d3
  ~jz _osmRun_edtfg
  ~cmp r7 d4
  ~jz _osmRun_edtbg
  goto osmRun_int

  osmRun_rndclr:
  ~mov r6 bp
  ~sub r6 *curfg
  ~mov r7 bp
  ~sub r7 *curbg
  call osmRndClr
  goto osmRun_int

  osmRun_edtfg:
  ~mov r7 bp
  ~sub r7 *curfg
  call osmEdtClr
  goto osmRun_int

  osmRun_edtbg:
  ~mov r7 bp
  ~sub r7 *curbg
  call osmEdtClr
  goto osmRun_int

  osmEnd:
  ~turbo d0
}

function osmEdtClr {
  local curclrptr
  local curclor
  local curswt
  curswt = d0
  ~mov curclrptr r7
  osmEdtClr_lp:
  ~mov r6 curclrptr
  ~mov r7 [r6] 
  ~mov curclor r7
  rgb d0 d0 d0
  rct d98 d98 d25 d16
  call makeColr
  rct d100 d100 d10 d10
  point d111 d106
  ~mov r7 curclor
  ~and r7 11000000
  call makeColr
  printstr R
  ~mov r7 curclor
  ~and r7 00110000
  call makeColr
  printstr G
  ~mov r7 curclor
  ~and r7 00001100
  call makeColr
  printstr B
  rgb d255 d255 d255
  point d107 d112
  ~mov r7 d0
  osmEdtClr_mcrs:
  ~cmp r7 curswt
  ~sz d3
  ~add r7 d1
  ~add r0 d4
  ~jmp _osmEdtClr_mcrs
  paint
  ~add r0 d2
  paint
  ~sub r0 d1
  ~sub r1 d1
  paint
  osmEdtClr_inp:
  ~mov r7 int
  ~mov int d0
  ~cmp r7 00000000
  ~jz _osmEdtClr_inp
  ~cmp r7 K_WEST
  ~snz d1
  curswt - d1
  ~cmp r7 K_EAST
  ~snz d1
  curswt + d1
  ~cmp r7 K_NORTH
  ~jz _osmEdtClr_inc
  ~cmp r7 K_SOUTH
  ~jz _osmEdtClr_dec
  ~cmp r7 K_CNTR
  ~jz _osmEdtClr_rtn
  ~cmp curswt 11111111
  ~snz d1
  ~mov curswt d0
  ~cmp curswt d5
  ~snz d1
  ~mov curswt d4
  goto osmEdtClr_lp
  ~end
  osmEdtClr_inc:
  ~mov r7 curclor
  ~mov r6 r7
  ~cmp curswt d1
  ~snz d4
  ~add r7 01000000
  ~and r7 11000000
  ~and r6 00111100
  ~or r7 r6
  ~cmp curswt d2
  ~snz d4
  ~add r7 00010000
  ~and r7 00110000
  ~and r6 11001100
  ~or r7 r6
  ~cmp curswt d3
  ~snz d4
  ~add r7 00000100
  ~and r7 00001100
  ~and r6 11110000
  ~or r7 r6
  goto osmEdtClr_sav
  osmEdtClr_dec:
  ~mov r7 curclor
  ~mov r6 r7
  ~cmp curswt d1
  ~snz d4
  ~sub r7 01000000
  ~and r7 11000000
  ~and r6 00111100
  ~or r7 r6
  ~cmp curswt d2
  ~snz d4
  ~sub r7 00010000
  ~and r7 00110000
  ~and r6 11001100
  ~or r7 r6
  ~cmp curswt d3
  ~snz d4
  ~sub r7 00000100
  ~and r7 00001100
  ~and r6 11110000
  ~or r7 r6
  goto osmEdtClr_sav
  osmEdtClr_sav:
  ~mov r6 curclrptr
  ~mov [r6] r7
  goto osmEdtClr_lp
  osmEdtClr_rtn:
}

function osmRndClr {
  ~rnd
  ~mov [r6] r0
  ~rnd
  ~mov [r7] r0
}

function osmDrawSelCur {
  ~mov r6 d0
  ~:_osmDSC_cmp
  ~cmp r6 r7
  ~jz _osmDSC_eq
  ~add r6 d1
  ~add r1 d5
  ~jmp _osmDSC_cmp
  ~:_osmDSC_eq
  ~pnt
  ~add r1 d2
  ~pnt
  ~add r0 d1
  ~sub r1 d1
  ~pnt
  ~sub r0 d1
  ~sub r1 d1
}

function osmDrawBG {
  local bgCol
  local fgCol
  ~mov bgCol r6
  ~mov fgCol r7
  ~mov r7 bgCol
  call makeColr
  rct d1 d1 d254 d254
  ~mov r7 fgCol
  call makeColr
  rct d0 d0 d2 d255
  rct d1 d0 d255 d2
  rct d0 d254 d255 d2
  rct d254 d1 d2 d255
}
function makeColr {
  local bCol
  ~mov bCol r7  
  ~mov r2 r7
  ~and r2 11000000
  ~mov r3 r7
  ~shl r3 d2
  ~and r3 11000000
  ~mov r4 r7
  ~shl r4 d4
  ~and r4 11000000
}

// I'm lazy, clean up your own stack. ('add sp dStringLen+1' after func ret)
function printStr {
  local curchr
  curchr = d3
  ~turbo d20
  ~:_printstr_lp
  curchr + d1
  ~mov r7 curchr
  ~mov r6 [bp + r7]
  ~cmp r6 d0
  ~jz _printstr_end
  
  call printchr
  ~jmp _printstr_lp
  ~:_printstr_end
  ~turbo terb
}
macro "char4map"-num-mem-num-mem-num {"cmp r6 %1%", "snz d3", "mov %2% %3%", "mov %4% %5%", "jmp _printchr_parts"}
function printchr {
  local prta
  local prtb
  ~cmp r6 d32
  ~snz d2
  ~add r0 d4
  ~jmp _printchr_nd
  ~cmp r6 CHAR_.
  ~jz _printchr_dot
  char4map CHAR_E prta 11101000 prtb 11001110
  char4map CHAR_T prta 11100100 prtb 01000100
  char4map CHAR_A prta 01001010 prtb 11101010
  char4map CHAR_O prta 11101010 prtb 10101110
  char4map CHAR_I prta 11100100 prtb 01001110
  char4map CHAR_N prta 11001010 prtb 10101010
  char4map CHAR_S prta 01101100 prtb 00101100
  char4map CHAR_H prta 10101010 prtb 11101010
  char4map CHAR_R prta 11001010 prtb 11001010
  char4map CHAR_D prta 11001010 prtb 10101100
  char4map CHAR_L prta 10001000 prtb 10001110
  char4map CHAR_U prta 10101010 prtb 10101110
  char4map CHAR_C prta 01101000 prtb 10000110
  char4map CHAR_M prta 11101110 prtb 10101010
  char4map CHAR_F prta 11101000 prtb 11001000
  char4map CHAR_W prta 10101010 prtb 11101110
  char4map CHAR_G prta 01101000 prtb 11100110
  char4map CHAR_B prta 11001100 prtb 10101110
  char4map CHAR_K prta 10101100 prtb 10101010
  char4map CHAR_X prta 10101010 prtb 01001010
  char4map CHARGT prta 10000100 prtb 01101000
  ~mov prta 01001000
  ~mov prtb 00100100
  printchr_parts:
  ~mov r7 d0
  printchr_partalp:
  ~mov r6 prta
  ~shl r6 r7
  ~add r7 d1
  ~and r6 10000000
  ~cmp r6 10000000
  ~snz d1
  ~pnt
  ~add r0 d1
  ~cmp r7 d4
  ~snz d2
  ~sub r0 d4
  ~add r1 d1
  ~cmp r7 d9
  ~jl _printchr_partalp
  ~sub r0 d5
  ~add r1 d1
  ~mov r7 d0
  printchr_partblp:
  ~mov r6 prtb
  ~shl r6 r7
  ~add r7 d1
  ~and r6 10000000
  ~cmp r6 10000000
  ~snz d1
  ~pnt
  ~add r0 d1
  ~cmp r7 d4
  ~snz d2
  ~sub r0 d4
  ~add r1 d1
  ~cmp r7 d9
  ~jl _printchr_partblp
  ~sub r1 d3
  ~sub r0 d1
  goto printchr_nd
  printchr_dot:
  ~add r0 d1
  ~add r1 d3
  ~pnt
  ~add r0 d2
  ~sub r1 d3
  printchr_nd:
}
-->