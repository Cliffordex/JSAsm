nop These are programs I wrote at various stages of the interpreter, and may not work as intended, or at all. Use at your own risk.

nop // AND
xor r0 r0
mov r2 11111111
mov r3 00000000
mov r4 00000000
mov r5 11111111
:lp
add r0 00000001
mov r1 01010101
and r1 r0
add r1 r6
pnt
cmp r0 11111100
jnz lp
nop // XOR
xor r0 r0
:lpb
mov r2 00000000
mov r3 11111111
mov r4 0000000
mov r5 11111111
add r0 00000001
mov r1 01010101
xor r1 r0
add r1 r6
pnt
cmp r0 11111100
jnz lpb
cmp r6 10000000
mov r6 10000000
mov r2 11111111
xor r3 r3
jnz lp
end


nop Sample_Itch_a_scritch_2
or int 10000000
mov r2 11111111
mov r5 11111111
mov r6 00000001
:cmove
pusha
xor r2 11111111
xor r3 11111111
xor r4 11111111
turbo 0
pnt
turbo 1
popa
cmp int 100000000
jz cmove
pnt
cmp int 10000011
snz 10
add r0 00000001
jmp cmove
cmp int 10000010
snz 10
sub r0 00000001
jmp cmove
cmp int 10000001
snz 10
sub r1 00000001
jmp cmove
cmp int 10000100
snz 10
add r1 00000001
jmp cmove
cmp int 10000101
jnz cmove
xor r2 r2
xor r3 r3
xor r4 r4
add r6 01
and int 10000000
push r6
and r6 00000001 // CMP RED
cmp r6 00000001
snz 01
mov r2 11111111
pop r6
and r6 00000010 // CMP GREEN
cmp r6 00000010
snz 01
mov r3 11111111
sub sp 00000001
pop r6
and r6 00000100 // CMP BLUE
cmp r6 00000100
snz 01
mov r4 11111111
sub sp 00000001
pop r6
push 00000000
add sp 00000001
pnt
cmp r6 00000111
jnz cmove
mov r6 00000000
jmp cmove


turbo 1
nop Bandmaker
:setup
mov r0 1000000
mov r2 11111111
mov r5 11111111
:mvdn
turbo 1
add r1 00000001
add r0 00000001
add r2 00000010
mov r3 r2
xor r3 10101010
nop clr
turbo 0
pnt
turbo 1
cmp r1 01000000
jnz mvdn
:mvup
turbo 1
sub r1 00000001
add r0 00000001
add r2 00000010
mov r4 r2
xor r4 10101010
nop clr
turbo 0
pnt
turbo 1
cmp r1 00000001
jnz mvup
jmp mvdn


nop Pong Practice
or int 10000000
mov #d0 10000000
mov #d100 10000000
mov #d101 10000011
mov r1 d1
mov r2 11110000
mov r3 r2
mov r4 r2
:_lp
turbo 0 // Change to 1 for hardmode
turbo 1
add r6 d1
:_domv
mov r0 #d100
cmp int 10000011
snz 11
cmp r0 11100000
sz 1
add r0 d1
cmp int 10000010
snz 11
cmp r0 00000011
sz 1
sub r0 d1
mov #d100 r0
:_doX
mov r0 #d0
mov r1 #d1
cmp r0 00000000
snz 1
and r7 11111101
cmp r0 11111011
snz 1
or r7 00000010
push r7
and r7 00000010
cmp r7 00000010
pop r7
sz 1
add r0 d1
snz 1
sub r0 d1
mov #d0 r0
:_cmpDoY
mov #sp r6
and r6 00000111
cmp r6 00000100
mov r6 #sp
jz _dopaint
:_doY
cmp r1 00000000
snz 1
and r7 11111110
cmp r1 11111100
snz 1
or r7 00000001
:_cmpPadLoc
cmp r1 11110000
jnz _cY
mov #d90 r1
mov r1 #d100
sub r1 d3
cmp r1 r0
mov r1 #d90
jg _cY
mov r1 #d100
add r1 d30
cmp r1 r0
mov r1 #d90
jl _cY
or r7 00000001
mov r1 #d90
:_cY
mov #sp r7
and r7 00000001
cmp r7 00000001
mov r7 #sp
sz 1
add r1 d1
snz 1
sub r1 d1
mov #d1 r1
:_dopaint
clr
push r0
push r1
push d4
push d6
rct
sub r0 d1
add r1 d1
push r0
push r1
push d6
push d4
rct
mov r0 #d0
mov r1 #d1
:_dpad
pusha
mov r0 #d100
mov r1 11111000
add r0 00000010
push r0
mov r0 r1
sub r0 00000010
push r0
push 000011010
push 000000111
rct
mov r3 00000000
mov r4 00000000
mov r0 #d100
mov r2 #d101
cmp int 10000000
jz _notmoving
cmp r2 11111111
jz _afta
add r2 d1
jmp _afta
:_notmoving
cmp r2 00000000
jz _afta
sub r2 d1
:_afta
mov #d101 r2
push r0 // STRIPE
push r1
push 000011110
push 000000011
rct
popa
jmp _lp

nop Starfield
:_setup
turbo 0
turbo 1
add r1 d1
rnd
mov r2 r0
rnd
mov r3 r0
rnd
mov r4 r0
rnd
pnt
jmp _setup

nop Shieldy
nop turnpos sincelast numballs [dist dir]
:_setup

:_lp
turbo 0
turbo 1
cmp int 00000000
jz _ddrw
cmp int 00000101
jz _ddrw
mov r7 #d0
and r7 00000010
cmp r7 00000010
jnz _mlr 
cmp int 00000001
snz d1
mov #d0 00000000
jz _ddrw
cmp int 00000100
snz d1
mov #d0 00000001
jmp _ddrw
:_mlr
cmp int 00000010
snz d1
mov #d0 int
cmp int 00000011
snz d1
mov #d0 int
:_ddrw
and int 11111000
clr
:_dg
mov r6 #d0
mov r2 d228
mov r3 d185
mov r4 d142
push d127
push d127
push d4
push d4
rct
:_dshld
mov r2 d200
mov r3 r2
mov r4 r2
mov r6 #d0
and r6 00000010
cmp r6 00000010
jz _shlr
mov r6 #d0
mov r0 d120
cmp r6 00000001
snz d1
add r0 d14
push d124
push r0
push d10
push d4
rct
jmp _lp
:_shlr
mov r6 #d0
mov r0 d120
cmp r6 00000011
snz d1
add r0 d14
push r0
push d124
push d4
push d10
rct
:_dobl

jmp _lp



rnd
mov #00000000 r0
rnd
mov #00000001 r0
rnd
mov #00000010 r0
rnd
mov #00000011 r0
rnd
mov #00000100 r0
rnd
mov #00000101 r0
:_lp
mov r2 d0
mov r3 d0
mov r4 d0
mov r5 d10
push 00000001
push 00000001
push 11111111
push 11111111
rcta
mov r2 #00000110
mov r3 #00000111
mov r4 #00001000
mov r0 #00001001
mov r1 #00001010
pnt
turbo 0
turbo 1
mov #00001011 posl
mov r6 00001001
mov r7 00000000
jmp _dcmp
mov #00001011 posl
mov r6 00001010
mov r7 00000001
jmp _dcmp
mov #00001011 posl
mov r6 00000110
mov r7 00000010
jmp _dcmp
mov #00001011 posl
mov r6 00000111
mov r7 00000011
jmp _dcmp
mov #00001011 posl
mov r6 00001000
mov r7 00000100
jmp _dcmp
jmp _lp
:_dcmp
cmp #r6 #r7
jz _ntarg
jg _movup
jl _movdn
:_aftmov
add #00001011 11
mov r7 #00001011
jmp r7
jmp _lp
:_ntarg
push r0
rnd
mov #r7 r0
pop r0
jmp _aftmov
:_movdn
add #r6 1
jmp _aftmov
:_movup
sub #r6 1
jmp _aftmov





-- AWESOME THING --
turbo 1
mov r2 d254
mov r3 d254
mov r4 d254
:_st
add r0 d1
mov r1 r0
and r1 r6
:mov r7 r1
:shr r7 d1
:sub r0 r7
pnt
:add r0 r7
cmp r0 d0
jnz _st
add r6 d1
cmp r2 d0
sz d2
sub r2 d2
jmp _st
cmp r3 d0
sz d2
sub r3 d2
jmp _st
cmp r4 00011110
sub r4 d32
mov r2 d254
mov r3 d254
jnz _st

-- AWESOME THING VER 2 --
turbo d5
mov r2 d255
mov r3 d255
mov r4 d255
:_st
turbo d1000
add r0 d1
mov r1 r0
and r1 r6
mov r7 r1
shr r7 d1
sub r0 r7
pnt
xor r1 11111111
xor r0 11111111
:xor r2 11111111
xor r3 11111111
xor r4 11111111
add r0 d128
pnt
sub r0 d128
xor r0 11111111
xor r1 11111111
:xor r2 11111111
xor r3 11111111
xor r4 11111111
add r0 r7
cmp r0 d0
jnz _st
add r6 d1
cmp r3 d1
sz d2
sub r3 d2
jmp _st
cmp r4 d1
sz d2
sub r4 d2
jmp _st
cmp r4 00011110
sub r4 d32
mov r2 d254
mov r3 d254
:jnz _st